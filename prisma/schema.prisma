// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String  @id @default(uuid())
  email    String  @unique
  password String?
  isGoogle Boolean @default(false)
  user     User?
}

model User {
  id                String              @id @default(uuid())
  name              String              @db.VarChar(50)
  surname           String?             @db.VarChar(50)
  image             String?
  role              Role                @default(client)
  auth              Auth                @relation(fields: [idAuth], references: [id])
  idAuth            String              @unique
  order             Order[]
  review            Review[]
  favourite_product Favourite_Product[]
  state             State               @default(active)
  cart              Cart?
}

model Product {
  id                String              @id @default(uuid())
  name              String              @unique @db.VarChar(50)
  description       String              @db.Text
  image             String?
  price             Float               @db.Real
  category          Category
  lactose           Boolean
  gluten            Boolean
  alcohol           Boolean
  stock             Boolean             @default(true)
  ingredients       Json
  originCountry     String?             @db.VarChar(50)
  isPrepared        Boolean             @default(true)
  order_product     Order_Product[]
  discount          Int?
  attribute         Attribute?          @relation(fields: [idAttribute], references: [id])
  idAttribute       String?             @unique
  favourite_product Favourite_Product[]
  state             State               @default(active)
  cart_Product      Cart_Product[]
}

model Attribute {
  id         String     @id @default(uuid())
  cream      Boolean
  texture    Texture
  body       Body
  acidity    Acidity
  bitterness Bitterness
  roast      Roast
  color      Color
  product    Product? // se eliminó idProduct, para mejor crear idAttributes en la tabla de Products (todo para que al hacer que la info sea más fácil manipularla)
}

model Order {
  id            String          @id @default(uuid())
  status        Status
  total         Float           @db.Real
  date          DateTime
  user          User            @relation(fields: [idUser], references: [id])
  idUser        String
  order_product Order_Product[]
}

model Order_Product {
  quantity  Int
  total     Float   @db.Real
  product   Product @relation(fields: [idProduct], references: [id])
  idProduct String
  order     Order   @relation(fields: [idOrder], references: [id])
  idOrder   String

  @@id([idProduct, idOrder])
}

model Favourite_Product {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [idUser], references: [id])
  idUser    String
  product   Product @relation(fields: [idProduct], references: [id])
  idProduct String
}

model Review {
  id          String   @id @default(uuid())
  description String
  date        DateTime
  rating      Rating
  user        User?    @relation(fields: [idUser], references: [id])
  idUser      String?
}

model Cart {
  id           String         @id @default(uuid())
  token        String?
  date         DateTime?
  total        Float?         @db.Real
  user         User           @relation(fields: [idUser], references: [id])
  idUser       String         @unique
  cart_Product Cart_Product[]
}

model Cart_Product {
  id        String  @id @default(uuid())
  qty       Int
  price     Float   @db.Real
  product   Product @relation(fields: [idProduct], references: [id])
  idProduct String
  cart      Cart    @relation(fields: [idCart], references: [id])
  idCart    String
}

enum Role {
  admin
  employee
  client
}

enum State {
  active
  inactive
}

enum Category {
  coffee
  tea
  sweetBakery
  saltyBakery
  other
}

enum Texture {
  desertDunes
  coarse
  medium
  fine
  veryFine
}

enum Body {
  light
  perceivable
  medium
  thick
  sirupy
}

enum Acidity {
  notFound
  light
  perceivable
  fresh
  high
}

enum Bitterness {
  light
  perceivable
  medium
  high
  veryHigh
}

enum Roast {
  cinnamon
  light
  city
  fullCity
  dark
  french
  italian
}

enum Color {
  yellow
  amber
  lightBrown
  hazelnut
  darkBrown
  dark
}

enum Percentage {
  five
  ten
  fifteen
}

enum Status {
  pending
  complete
}

enum Rating {
  one
  two
  three
  four
  five
}
